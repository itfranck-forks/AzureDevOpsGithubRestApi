# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

# A pipeline with no CI trigger
trigger: none
pr:
- master

pool:
  vmImage: 'vs2017-win2016'

steps:
- task: jikuma.devops-github-extension.custom-build-release-task.azuredevopsgithub@0
  displayName: 'Github GET'
  name: 'githubget'
  inputs:
    gitHubConnection: 'jikuma-extension'
    method: GET
    githubrestapiurl: 'https://api.github.com/repos/$(BUILD.REPOSITORY.ID)/issues/$(system.pullRequest.pullRequestNumber)'

- powershell: |
   # Create a 'New' label
   $unitTestMissingLabel = New-Object -TypeName psobject
   $unitTestMissingLabel | Add-Member -MemberType NoteProperty -Name name -Value 'New'
   
   #Convert String Output (Variabel set by previos github task) to Json
   #Step 1: Remove quote around the string
   $issue = '$(githubget.Output)'.Substring(1, '$(githubget.Output)'.Length-2)
   
   #Step 2 : Remove escape sequence from string
   $issueJsonString = $issue -replace '\\', ''
  
   #Convert to json
   $issueJson= ($issueJsonString | ConvertFrom-Json)
   
   #Start creating patch json by selecting label property
   $issuePatchJson = $issueJson | Select-Object -Property labels
   $issuePatchJson.labels += $unitTestMissingLabel
   
   #Convert Patch obj to json
   $issuePatchString = ($issuePatchJson  | ConvertTo-Json -Compress)
   
   # Create a VSTS variable OutputVar to be used in another step
   Write-Host '##vso[task.setvariable variable=OutputVar;isOutput=true]'$issuePatchString
   
  displayName: 'PowerShell Script'
  name: 'powershellScript'
      
- task: jikuma.devops-github-extension.custom-build-release-task.azuredevopsgithub@0
  displayName: 'Github PATCH'
  inputs:
    gitHubConnection: 'jikuma-extension'
    method: PATCH
    body: '$(powershellScript.OutputVar)'
    githubrestapiurl: 'https://api.github.com/repos/$(BUILD.REPOSITORY.ID)/issues/$(system.pullRequest.pullRequestNumber)'
